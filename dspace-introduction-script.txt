Hi everbody, this is X, I am Y, and we want to talk to you about Dspace today.

Who has ever heard the term "DSpace" before?

...

[NEXT] -> Question

We want to start with a question:
If life was a computer game, which features are missing in the interface?

...

[NEXT] -> street Boring

...

[NEXT] -> street dspaced

This is the vision we have, where we want to go.
We are not there yet, but we have all the basic building blocks together.
And that's what we're going to show you today...

[NEXT] -> TOC

Split into 
Who we are,
what we want
what we have
and what we need

[NEXT] -> #Who we are

While the two of us give you this presentation today
there are more people heavily involved in this project.
we are a small group of software hackers and we do this in our free time, so this gets us to what we want:

[NEXT] -> #What do we want: Something like a standard

TODO: Remove staging slide!

We want to start something like a standard. We are not a startup and are not looking for a business model here.

We were inspired by the origin of the www, and we want to establish a framework of 
federated
free (as in beer and as in speech)
open-sourced
loosly coupled
and extendable
components

tim berners lee put the concept of cross-referenced publications to the electronic realm, when he created the Web at cern
and in that spirit we want to work upon maps,
starting with the fundamental Basemap:

[Next] -> Basemaps

The basemap is served as tiles of prerendered bitmaps, which are composed
from several layers
...

[NEXT] -> Basemap Properties

This is how a finished basemap tile looks.
All the data that goes into the basemap is
static or at least valid for a long term
it is of general interest

from the point of a user, only one basemap is visible at any time.

the composition of the map may depend on the region or application. 
For example, for a map of the alps, topography info is very important. for flat land, not so much.

updates for the basemap are resource intensive, and so they are rendered server-side 

[NEXT] -> Overlays

The other important concept besides basemaps are overlays:

<start on the bottom!>
Several of them can be put on top of the basemap to show
waypoints on a route
realtime locations of people/animals/devices
points of interest

[NEXT] -> Overlay Properties

So all overlays are basically collections of things at locations
They can be public or private
Opposed to the basemaps, they are very dynamic, and multiple can be visible at a time.

[NEXT] -> Basic Overlay applications

Now we can - with a little story - show what things we can do with these overlays:

...

[NEXT] -> Advanced Overlay applications

...

[NEXT] -> Architecture Overview

So now you get a rough idea how the whole thing comes together:

We generate (TileMill) and stream (TileStream) the Basemap

Overlays can come from several sources, we will go into more detail there soon.

The basemaps and overlays are registered in a (yet to be built) directory server, where the client can search for them, and finally access them.

With this idea of where we want to go, let's check out what we already have:

[NEXT] -> #What do we have
TODO: Remove staging slide!

First in the sense of other projects upon which we built.
We could not do this without ...

[NEXT] -> Why not OSM?

One question we are repeatedly confronted with is "Why don't you just put everything into OSM?

Two reasons: not everything is in OSM and not everything belongs in osm

[NEXT] -> Map Forge

...

[NEXT] -> Map Forge Screenshot

...

[NEXT] -> Map Delivery

...

[NEXT] -> DEMO TileStream

...

[NEXT] -> Overlays GeoJSON

On core concept of the overlays is the GeoJSON format.
It encodes a location and arbitrary key-value data as json


[NEXT] -> Overlays

So the simplest overlay is a static, read-only geojson file which can be accessed by url

The data can also be a bit more dynamic, spaceAPI is a list of hackerspaces, with an additional url for each space that returns the state, if the space is open or closed. we can put this info as a status icon on the map

We also have support for remotestorage, so you can create a list on your phone, and as long as you are connected to a rs account set up, can also access it on your laptop

Navigation is also an overlay, a list of connected locations. We use routino to generate the routing info, which also builts upon OSM data.

[NEXT] -> Client
Now we come to the core piece of the whole thing, the client

it is a modern html5 and javascript web application
we are using modest maps as framework to get an render the basemap tiles and markers ontop of that.

In the design and implementation, we put our focus on
a design that is as lightweight as possible
but can be extended with powerful plugins. we try to implement even the core functionality like routing as a plugin

mobile integration is also very important, because we work with the real world, outside of this window.

And, because we are on a nodejs meeting, the client is not a huge jquery monster, but assembled built and packaged with nodejs.

An now, without further delay, you finally get to see the client in action:
 
[NEXT] -> DEMO Client

...

[NEXT] -> NPM Package

...

[NEXT] -> Comfortable Build Process

...

[NEXT] -> Ops friendly deploy

...

[NEXT] -> #What do we need?

[NEXT] -> Directory Server

What we need in the sense that it has not yet been done:
a directory server, where all the basmaps and overlay feeds can be registered and be accessed by the client.

It would have to be
federated, the directory should sync between instances
searchable, so the served results can be filterd by the request of the client. to do that efficiently,:
there should be some kind of user-based ranking or voting system to sort entries by importance and filter out spam
there should be metadata that states the region the map or overlay covers 
and keywords to classify and search upon the entries

to do this, we are thinking about a format that has as attributes
the url where to actually access the data (which is also a good primary index)
type, which distinguishes basmaps and overlays 
topleft and bottomright, which are coordinates for the enclosing rectangle of the area of interest.
and attributes for the search.

so the directory server would manage a list of such entries, sync them between instances and serve them to the client.

[NEXT] -> Client

For the client, we have to provide more functionality for overlays.
For the moment, we just render simple points with markers, but we want to
put arbitrary polygons on the map, which we started with the routing
put translated images on the map, so you can make overlays out of floorplans of buildings etc.
put 3d geometry on the map, for representation of structures and more

because the world outside is so crucial for dspace, we really have to focus on mobile usabilty. it has to be comfortable and efficient to use on the smartphones and tablets running ios and android.

and we are really looking forward to what we can do with google glass,
bringing us one step closer to the video game interface in the beginning

Related to the directory server, we need a browser for overlays (and also basemaps), (Maybe we should call it directory browser?), where we can search for data

Encryption is another thing we want to put a focus on, we omitted it in the beginning, to focus on the core technology, but we want to provide good tools to protect privacy.

[NEXT] -> Collaboration

So far we covered the technological side of what we need, but in order to run a federated project, the most important thing we need is other humans.

We need people making and serving basemaps. Federation by location
We need people who expose existing geodata as overlays to dspace
and we need people who push ahead development, writing documentation, reporting and fixing bugs and inspire and implement new features.

We are finished here we this call, if you want to learn more and keep in contact, you can find all info here:

[NEXT] -> End

Thank you for your attention.

Any questions?
